1) With the data that you have, what kind of data visualisation graph should be used?
We have a large range of data spaced out over the period of a number of days, each day
containing 1,440 readings. With these visualisation graphs we want to be able to look 
at the data but also analyze patterns and be able to display data for a large period 
of time. For these reasons we have chosen a Line Graph for daily representations and 
a Bar graph for weekly average representations

2) What should be represented in the above graph? Why did you make that decision?
For the Line graph we have chosen to display 24 hours of data so anyone veiwing the 
graph could see the way the temperature changed over a period of 24 hours. While for
the bar graph we chose to represent te averages of a weeks worth of data. We have made
these two graph both for the temperature recorded and the humidity.

3) Researching different Python data visualisation libraries
As i had not done any work with python or data visualisation libraries in python before
i research the top five libraries that i could find to try and decide which would be the
best to display the collected information.

Matplotlib
With Matplotlib i found that its quite an old and established library; over a decade old.
Its a rather easy library to use as the simpliest of graphs can be made with minimal lines
of code, the website even had some examples for plotting a line graph with two lines and it
was roughly 8 lines of code total. It has a large range of different types of graphs and
images that it can produce, using different colours, shapes, layouts and styles

Seaborn
The Seaborn library is based on the Matplotlib library, but focuses more on statistical 
graphics. Seaborn offers a large range of functionalily op top of Matplotlib, including
muntiple tools, consise control, selevral built-in themes and a dataset-oriented API.
Looking at some of the examples in the example gallery there doesnt seem to be as many 
as Matplotlib but the coding looks just as easy; a timeseries plot takes roughly 5 lines
of code.

Bokeh
Bokeh is a good library for anyone wanting to quickly and eaily create a data full graph. 
Bokeh designs the data visualisation with target of a web browser. The examples provided
in the gallery cover a large range of different graphs in all styles and colours. Looking
specifically at a basic bar graph the example shows one being created with 8 lines of code.
Asside from the stand alone examples the gallery also has examples of Server Apps, showing
interactive examples. Bokeh supports streaming and real-time data.

Plotly
Not many pepole know that Plotly can be accessed via Python. Plotly, like Bokeh, can create
interactive graphs and offers a number of graphs/charts that are not generally found in other
libraries. Plotly has a large breakdown of the graphs and charts it can make, including 3D
ones. It also offers the users style and layout options, the option to connect to a database,
report generation and the option to include custom interactivity. As an example a simple line
chat with two lines can be made in roughly 9 lines.

Altair
The Altair library handles a lot of the plotting details automatically meaning the users are 
required to only write the simpliest of code. Altair is simple, friendly and consistent. While
overall there arent as many examples, as i dont believe Altair can create as many graphs as other
libraries such as Matplotlib, it requires much less code to create the graphs. Plotting a simple
line graph takes 3 lines of code and a simple bar chart takes 2 lines.

4) Which two libraries did you narrow it down to? why/how?
In the end after a discussion we decided on using Matplotlib and Bokeh. The decision making was cut
down as Nhi had worked with Matplotlib before so we decided that Matplotlib should be one of the
libraries we used as Nhi was already familiar with it and how it works. For the second library we
decided on Bokeh as it is easy to use and web-friendly

5) A comparison of the libraries used:
Its hard to compare the libraries as each library has its own sort of distinct purpose.

Matplotlib:
	advantages:
	- “tries to make easy things easy and hard things possible”
	- very powerful, can create basically any kind of graphs out there
	- well established, well maintained, well documented, well supported by python and the community, less bugs
	- a lot of resources out there to learn matplotlib, lots of exmaples on the website with code
	- huge community that answered basically all problems that you may run into
	- great visualisation library
	- open-source
	- good at data analysis and large computatils (numarical or matrix)
	
	disadvantages:
	- API is relatively low level
	- often require Seaborn to make it prettier
	- because it has many functions and types of plotting, it can be overwhelming for beginners if they haven't got
			any experience with data modelling or playing around with a data visualisation libraries
	- 

Bokeh:
	advantages:
	- allows you to build complex plots quickly with simple commands
	- provides output in various mediums
	- can be embedded
	- can transform visualisation written in other libraries
	- flexibility for applying interaction, layouts and styling options

	disadvantages:
	- undergoing a lot of development - code might not be reusable in the future
	- relatively less visualisation options compared with other libraries
	
6) What is the data size for the graphs and does that affect the choice of a library
For the line graph the x-axis will be time and the y-axis will be temperature/humidity, and for the bar
graph the x-axis will be the date and for the y-axis it will be the average temperature/humidity. No
this does not affect the choice of library as we had decided this before choosing a library and believe
that it should not affect the choice in libraries

7) How is the visualization being created?
The analytics.py script has direct access to the database date, however it is unable to modify or add data,
it has access to two functions of the database script; getAverageWeatherData and getWeatherDataOn which 
return the required information to plot a point on the graph
